1.C++处理字符串的类givetoteaoa

	类名  string  
	包含在  iostream


2.   class A  

		int m_data;

		show(B &b)
		{
			// error
			// 没有public权限，不能这么调用
			cout << " b.m_data  = " <<	b.m_data
				<< endl;
		}

		show(A &a)
		{
			// OK   
			// 同一个类中 成员函数访问 它的成员变量
			// 是合理合法的。
			cout << " a.m_data  = " <<	a.m_data
				<< endl;
		}
	
	
	 class B
		int m_data;

	小结：

		同一类的不同对象的成员在该类的成员函数中可
		以直接访问

		一个类（A）的对象在 另一个类（B）的成员函
		数中访问，必须有public权限或者 通过该类(A)
		公有的getXXX()/setXXX()函数间接访问

3.static在C++中的应用

	修饰成员

exercise 001

	设计一个学生类
		自己的名字
		授课老师的名字
		课程
	行为：		
		1.上课  void listen()
			XXX 在 听  XXXX(老师)讲   course 课
		2.更换老师	
			void change(string name,string course)

实现以下命题
		小王  在听 马老师 讲  C++ 课程
		小明  在听 马老师 讲  C++ 课程
		// 。。马老师的C++讲完了
		小明更换  朱老师  讲课
		小王  在听 朱老师 讲  Qt 课程
		小明  在听 朱老师 讲  Qt 课程

由 某个学生 更换  老师  讲课 合适吗？

	可以用 静态成员函数 去实现


静态成员函数  -------- 类成员函数


	特 点：函数内部只能使用静态成员变量

	
4. :: 域作用符 使用小结

	名字空间::变量名

	类名::成员名 --------- 静态成员调用方式

		功能：主要是告诉编译器,在哪个区域能访问到
			  该成员


5.const 在C++中的应用

	基本功能：const修饰的变量 

				1.必须初始化
				2.值不能修改

	修饰的成员
		成员变量：值不修改，且必须初始化
		成员函数：

常成员函数

	形    式： void show()const;

	特	点：

		 1.不能修改 成员变量的值
		 2.也能构成函数重载 (特例)
		 3.普通对象   优先调用  普通成员函数
	            常对象      只能调用  常成员函数


6.各种不同的对象

	内存：全局对象  /  静态对象  / 局部对象  /  堆对象

	间接操作其他对象：对象指针   /  对象引用
			Test t;
			Test *pt = &t;	// 不会调用 构造函数函数
			Test &rt = t;	// 不会调用 构造函数函数
				不会调用 构造函数函数

	应用方面：无名对象 	临时对象(局部)

	无名对象
		定     义：没有对象名的对象
		性	质：生命周期及其短暂
		应用范围：1.2.

堆空间的操作：
		
	C语言中	malloc()  和 free()
	C++ 	new   和  delete

		new : 申请一块堆空间
		delete:释放一块堆空间

	1.new 和 delete 是 运算符
	2.主要是为 堆对象 服务的
		对于普通变量的在堆空间的数组是
		不支持连续释放！！！
	3.用new创建一个对象的时候，它会自动调用 构造函数
	  用delete释放一个对象的时候，它会自动调用 析构函数
	 用 malloc  / free  分别申请 释放一个堆对象

7.各种不同的类（了解）

	嵌套类：一个类的声明在另一个类的类中

	局部类：定义在某个函数中的类，作用范围小

	  
X.扩充 

	类的组成

		成员变量

			this  隐藏的

			特殊的   1.const   reference	
				     2. static / const 

		成语函数

			默认提供的

				构造/析构/拷贝构造

			特殊：
				static / const 
		
=================================

home work 001

	仿写 string 类  ，取名 String 

	1.完成4种构造函数

		(1)String s;						// m_p  =  NULL	
		(2)String s("weiwei");		
		(3)String s1(5,'c');
		(4)String s(s1);

		注意点5：
			~String()  要释放空间

			if( NULL != m_p)
			{
				free(m_p);				// 指针释放完空间，必须指向NULL
				m_p = NULL;
			}
			
	2.完成  size()   /  bool empty() 成员函数

	3. String类中  只能有一个成员变量  char *m_p
	
注意点：

		1.NULL是不能输出的

			if(....)
				打印""
	
		2.String s;
		   cout << s << endl;  //需要重载 << 运算符函数（后面学习内容）
		   目前，使用show()函数打印即可
		   
		3.拷贝构造函数
		
			 (4)string s(s1);  m_p = s1.m_p   error

		4.申请空间的大小为:内容长度 + 1
			 
			深拷贝 和 浅拷贝 

			浅拷贝: 调用默认的拷贝构造函数 

									只拷贝值，不拷贝空间！！！！

			缺		点：当一个类中存在指针成员变量的时候，这个类的对象通过
						   拷贝构造创建多个新对象的时候，这些对象中的成员指针
							会指向同一块内存空间，当其中一个对象释放了这个指针
							成员指向的空间，那么其它对象的这个成员指针就没有可
						   以操作的内存空间了

		例如：   Test  t       m_p   =  0x 00056

				      Test t1(t)  m_p = 0x00056

					......   
		深拷贝：手写拷贝构造函数，为指针成员变量 申请内存空间，
					    并赋值的过程

		小结：

			只有当类中有指针成员变量的时候，我们才需要深拷贝，其余的
			时候，调用默认的拷贝构造函数即可
				




	(选做)4.上述成员函数的实现，不要使用

			strlen()  strcpy()  等 库函数

	备注：实现上述函数的时候，尽量测试C++库中
		 string 的成员函数的实现


home work 002

	升级 monster.cc 

		1.将打斗的过程 封装成  
			
			void fight(monster &m)

		2.在fight()中能够显示 当前是第几回合

		3.attack() 的伤害值变化如下：

			（1）自身的生命值 < 原生命值80%

				伤害值  降低为 原伤害值的75%

			（2）自身的生命值 < 原生命值60%

				伤害值  降低为 原伤害值的50%

			（3）自身的生命值 < 原生命值20%

				伤害值 上升为 原伤害值的120%

		4.设计一个显示属性的成员函数

			void show(); 

			目标：将怪物的各项属性打印一遍

		在 fight()内部 的 循环攻击结束之后调用show()
	
home work 003:

		总结 static的用法（C/C++）
			1.修饰全局变量  该变量只能在本文件中使用
			2.修饰局部变量	 只初始化一次，生命周期在main函数结束
										 的时候结束
			3.修饰 成员变量	  所有该类的对象共有，只能在类外初始化
			4.修饰成员函数	  只能使用静态的成员变量

home work 004:

		总结 const的用法（C/C++）

			1.普通变量
			2.函数的形参
			3.类对象，成员不能修改
			4.成员变量 必须初始化
			5.成员函数	
					普通对象         普通成员函数
					常对象             常成员函数

home work 005:

		分别写出如下数据类型的变量和"零"值的比较语句
		每个类型的变量写一条比较语句即可

			int  /   float / bool /  指针

			float    if (f > -0.00001 && f < 0.00001)
			int  4  32bit 全部用来存放整数
			float  4     32bit  部分bit存放整数部分，部分存放小数部分的


		并说明理由。

home work 006:

		说一说malloc/free和new/delete的区别
			
		共同点：都可以操作堆空间
		不同点： 1.函数   /   运算符
						2.构造函数 / 析构函数的调用
						3.对象


home work 007:

		总结&的用法
		1.引用        = 左边的
		2.取地址    = 右边的
		3.位与        &
		4.逻辑与    &&
	












