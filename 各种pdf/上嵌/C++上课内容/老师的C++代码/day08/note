review

	1.cin  / cout / cerr / clog

	2.ios

	3.设备IO流 / 文件IO流 / 字符串IO流

	4.  ostream   << /  put() / width() / fill() / precision 
			     setf() / unsetf()

	     istream  >> / get() / getline() / peek() / ignore()
			   putback()

	    缓冲区

	5. 文件IO

		ifstream

			>>()   read()   getline()

			good() fail() clear()

			tellg()   seekg()	

			gcount()

		ofstream

			<<  write ()

			tellp()   seekp()	

		fstream

			包含几乎所有的ifstream 和 ofstream
			的成员函数

			特点：1.2.

		基本文件操作：

			open()  / is_open()  / close() / eof()


===================================

模板 和 STL

	1.到了理发店，你是如何让理发师给你理发的？

	2.装修房屋的时候，你是如何让设计师设计你比较满意的

	   样式的？

	
		给你一个参考的模板(图片，设计图等)，根据你的
		选择，进行设计

C++ 中模板

	对于逻辑结构一样，数据类型不一样的 对象(函数和类)，我们都可以做
	成模板

	比如：我们前面写过的重载函数 Max();

		Max(int,int);
		Max(char,char);
		Max(double,double);


模板的实现

	定义：

		模板的声明  template

		抽象数据类型的定义

			typename	函数中的抽象数据类型
			class		类中的抽象数据类型

		注：现在的typename和class没区别了
		

	原理：模板参数列表定义抽象的数据类型

	作用的对象：函数  /  类

		函数模板：使用 抽象数据类型 的函数 

		类模板：使用 抽象数据类型 的 类

	过	程：

		函数模板 不是一个具体函数 （就像 设计图）
		当给函数模板 传递 实参的时候，函数模板就
		会生成一个具有具体数据类型（形参）的函数

	特      点：

		提高编程速度，使用模板效率会降低

	使用范围：

		适用于函数体相同的重载函数或者类

	限	 制：

		一个template 只对一个对象（函数或者类）有效

类模板

	适用对象：成员变量	成员函数

	注意要点：

		成员函数定义和实现分开的时候

总结：

	模板 是 泛型编程思想基础

	简单来讲：就是忽略具体的数据类型，来编程

	template 是 自定义模板 --- 用户自己定义模板

C++ 还提供了标准的模板库  STL

vector的构造函数

vector<elementType> vecList;
vector<elementType> vecList(otherVecList) 	
vector<elementType> vecLIst(size);
vector<elementType> vecList(n,elem); 
vector<elementType> vecList(begin,end);  
 
队列的成员函数				stack的成员函数	
front()	返回队头元素                   -------------
back()	返回队尾元素		     -------------
push()	入队				          入栈
pop()	出队				          出栈
empty()    判断容器中的元素是否为空  empty
size()	返回容器中元素的大小          size
						top()	返回栈顶元素

用 stack类 实现 队列的成员函数

STL的学习方法

	1.了解不同容器的特点，根据特点，在开发中选择合适的容器

	2.会应用即可，不必深究STL是如何实现的！！！

			-------boost库（C++标准制定者）

	很多公司，一般招中级程序员  ---- 必须会使用boost库

	 年限         级别            薪资
	1 ～ 2    初级程序员    10w以内          2000
	3 ～ 5    中级程序员	15～20w         5000
	8年以上  高级程序员    25w以上         10000



	
异常（仅作了解）

	定    义：

		程序在编译或者运行时候，发生警告和错误

	原    因：
	
	编译时候的异常  -------->  使用语言语法不当造作的

	运行时候的异常	-------->  逻辑结构不严谨造作的

	后	果：
		
		一旦异常发生，程序可能中途停止，甚至
		崩溃

	解	决：

		编译时候的异常  -------->	编译器

		运行时候的异常  -------->	用户(程序员)预处理

如何处理运行时候的异常 ？

	使用try{}catch(){}语句块

	try
	{
		// 包含可能在运行时候出现异常的语句
		// 发现异常后，通过 throw 抛出，让
		//  catch捕获处理
	}
	catch()
	{


	}

	1.运行过程：
		
		正常	   try{}  --->  catch()之后的语句
		异常    try 到 throw;  ---> catch() ---> 
			  catch()之后的语句

	2.throw 抛出的数据可以是任意数据类型，但是
	   用户必须写多条catch()语句去捕获这个可能
	   抛出的异常数据

	3.万能逮获
		
		catch(...)	// ... 表示任意数据类型

		无法获得 抛出数据的值

	4.应用（ try catch在C++中并不成熟）

		try{}catch(){}目前在企业开发中，几乎
		不使用，因为现在调试器，在调试代码过程
		中，显示的信息很详细了

			例如：windows vs2010







