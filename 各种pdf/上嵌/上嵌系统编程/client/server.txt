#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include <unistd.h>
#include <sys/types.h>          /* See NOTES */
#include <sys/socket.h>
#include <strings.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/select.h>
#include <sys/time.h>

#include <sys/stat.h>
#include <fcntl.h>


#define MAXLINE 1000


struct message
{
    char flag[15];       
    char name[20];
    char msg[MAXLINE];
    char addressee[20];
    int size;
};

typedef struct _clientinf
{
    char name[20];
    struct sockaddr_in addr_in;
    int decr;
    pthread_t pid;
    
}clientinf;

typedef struct _User
{
    char name[20];
    char passwd[20];
}User;

    
typedef struct _LNODE
{
    clientinf data;
    struct _LNODE *next;
}LNODE,*LinkList;

LinkList clientlink;

typedef struct _List
{
    User user;
    struct _List *next;
}List;

List Head;




int getMaxFd(int * pint,int size);
void addFd(int * pint,int size,int fd);
void setAllFd(int * pint,int size,fd_set * fdset);

int overlap(struct message meag);
int login(struct message *meag,clientinf *clientNode);
int login_check(struct message *meag);
int insertend(clientinf *clientNode);
void Readfiletolinklist();
void Readlinklisttofile();
int reg(struct message *meag,clientinf *clientNode);
int reg_check(struct message *meag);
int insert(User user);

int main(int argc, char **argv)
{
    struct sockaddr_in cliaddr, servaddr;
    struct message meag;
    
    clientinf clientNode;
    fd_set rset;
    socklen_t clilen;

    int listenfd, connfd;
    int maxfd;
    int ret;
    int clientfd[64] = {0};
    int i = 0;
     
    strcpy(clientNode.name,"*****");
    //clientlink=CreateLinkList();
      
    listenfd = socket(AF_INET, SOCK_STREAM, 0);
    memset(clientfd,0xff,sizeof(clientfd));

    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    inet_aton("127.0.0.1", &(servaddr.sin_addr));
    servaddr.sin_port = htons(5678);

    bind(listenfd, (struct sockaddr *) &servaddr, sizeof(servaddr));

    listen(listenfd, 5);

    maxfd = listenfd;
    for ( ; ; ) 
    {
        FD_ZERO(&rset);
	FD_SET(listenfd,&rset);
	setAllFd(clientfd,64,&rset);
	maxfd = getMaxFd(clientfd,64);
	if(maxfd < listenfd)
	{	
	    maxfd = listenfd;
	}
	ret = select(maxfd+1,&rset,NULL,NULL,NULL);
	if(ret <= 0)
	{
	    if(errno == EINTR)
	    {
	        continue;
	    }
	    else
	    {
	        break;
	    }
	}
	if(FD_ISSET(listenfd,&rset))
	{
	    clilen = sizeof(cliaddr);
	    connfd = accept(listenfd, (struct sockaddr *) &cliaddr, &clilen);
	    addFd(clientfd,64,connfd);
	}
	for(i = 0; i < 64;i++)
	{
	    if(clientfd[i] > 0)
	    {
	        if(FD_ISSET(clientfd[i],&rset))
		{
		    int len;
		   
		    len = read(clientfd[i],&meag,sizeof(meag));
                    clientNode.decr=clientfd[i];
                    strcpy(clientNode.name,meag.name);                    
		    if(len == 0)
		    {
		        close(clientfd[i]);
			clientfd[i] = -1;
			continue;
		    }
                                      
                                     
	            write(1,meag.flag,sizeof(meag.flag));
                    printf("\n");
		    if(strcmp(meag.flag,"login")==0)
                    {   
                        printf("00000000\n");
                        if(overlap(meag)==0)
                        {
                            login(&meag,&clientNode);
                        }
                        else
                        {
                            strcpy(meag.msg,"overlap");
                            write(clientNode.decr,&meag,sizeof(struct message));
                        }
                        continue;
                    }
                    else if(strcmp(meag.flag,"reg")==0)
                    {
                        reg(&meag,&clientNode);
                        continue;
                    }
                    else if(strcmp(meag.flag,"all")==0)
                    {
                    }
                    else if(strcmp(meag.flag,"personal")==0)
                    {
                    }
                    else if(strcmp(meag.flag,"view")==0)
                    {
                    }
                    else if(strcmp(meag.flag,"reg")==0)
                    {
                    }
               		               
	        }    
	    }
        }
    }
    close(listenfd);
    return 0;
}



int getMaxFd(int * pint,int size)
{
	int max = pint[0];
	int i = 0;
	for(i=1;i < size;i++)
	{
		if(max < pint[i])
		{
			max = pint[i];
		}
	}
	return max;
}

void addFd(int * pint,int size,int fd)
{
	int i = 0;
	for(i = 0; i < size;i++)
	{
		if(-1 == pint[i])
		{
			pint[i] = fd;
			break;
		}
	}	
}
void setAllFd(int * pint,int size,fd_set * fdset)
{
	int i = 0;
	for(i = 0; i < size;i++)
	{
		if(-1 != pint[i])
		{
			FD_SET(pint[i],fdset);
		}
	}	
	
}


int overlap(struct message meag)
{   
    printf("888888888");
    LinkList L;
    L=clientlink->next;
    while(L!=NULL)
    {   
        printf("1111111\n");
        if(strcmp(L->data.name,meag.name)==0)
        {
            return 1;
        }
        else
        {
            L=L->next;
        }
        printf("222222\n");
    }
    return 0;
}


int login(struct message *meag,clientinf *clientNode)
{
    int i;
    char buf[MAXLINE];
    i=login_check(meag);
    if(i==1)
    {
        printf("%s Login success!\n",(*meag).name);
        memset((*meag).msg,0,strlen((*meag).msg));
        strcpy((*meag).msg,"login success!");
        strcpy((*clientNode).name,(*meag).name);
        insertend(clientNode);
        write((*clientNode).decr,meag,sizeof(struct message));
        
        LinkList L;
        L=clientlink;
        L=L->next;
        strcpy((*meag).flag,"sermsg");
        sprintf((*meag).msg,"Welcome %s into the chatromm!",(*meag).name);
        while(L!=NULL)
        {
            write(L->data.decr,meag,sizeof(struct message));
            L=L->next;
        }
     }
     else
     {
         printf("%s Login failed!\n",(*meag).name);
         strcpy((*meag).msg,"login failed!");
         write((*clientNode).decr,meag,sizeof(struct message));
     }
}


int login_check(struct message *meag)
{
    Readfiletolinklist();
    List *p=Head.next;
    while(p!=NULL)
    {    
        printf("33333\n");
        if(strcmp(p->user.name,(*meag).name)==0)
        {   printf("4444\n");
            if(strcmp(p->user.passwd,(*meag).msg)==0)
                return 1;
        } 
        p=p->next;        
    }
    return 0 ;
}



int insertend(clientinf *clientNode)
{
    LNODE *pnode=malloc(sizeof(LNODE));
    pnode->data=(*clientNode);
    pnode->next=NULL;
   
    pnode->next=clientlink->next;
    clientlink->next=pnode;
    free(pnode);
    return;
} 


int reg(struct message *meag,clientinf *clientNode)
{
    int i;
    char buf[MAXLINE];
    i=reg_check(meag);
    if(i==1)
    {
        printf("%s   register success!\n",(*meag).name);
        strcpy((*meag).msg,"register successs!");
        strcpy((*clientNode).name,(*meag).name);
        write((*clientNode).decr,meag,sizeof(struct message));
    }
    else
    {
        printf("%s  register failed!\n",(*meag).name);
        strcpy((*meag).msg,"register failed!");
        write((*clientNode).decr,meag,sizeof(struct message));
    }
}

int reg_check(struct message *meag)
{
    if(strlen(meag->name)>20 || strlen(meag->msg)>20)
        return 0;
    if(strcmp(meag->name,"admin")==0)
        return 0;
    if(strcmp(meag->name,"all")==0)
        return 0;
    if(strcmp(meag->name,"reg")==0)
        return 0;
    if(strcmp(meag->name,"login")==0)
        return 0;
    if(strcmp(meag->name,"trans")==0)
        return 0;
    Readfiletolinklist();
    List *p=Head.next;
    while(p!=NULL)
    {    
        if(strcmp(p->user.name,meag->name)==0)
        {
                return 0;
        } 
        p=p->next;        
    }
    User user;
    strcpy(user.name,meag->name);
    strcpy(user.passwd,meag->msg);
    insert(user);
    return 1;
}  

int insert(User user)
{
    List *pnode=malloc(sizeof(LNODE));
    pnode->user=user;
    pnode->next=NULL;
   
    pnode->next=Head.next;
    Head.next=pnode;
    free(pnode);
    return;
} 
          
void Readfiletolinklist()
{
    FILE *fp;
    User user;
    List *p=NULL;
    fp=fopen("personinf.txt","rb");
    if(fp==NULL)
    {
        printf("读取文件出错！！\n");
        exit(0);
    }
    else
    {
       
        while((fread(&user,sizeof(struct _User),1,fp))==1)
        // 利用尾插法将文件中读取的信息临时存储在链表当中
        {
            
            List *p=malloc(sizeof(struct _List));
            //1-1创建一个新结点p
            if(Head.next==NULL)
            {
                Head.next=p;
                p->next=NULL;
                p->user=user;
            }
            else
            {
                List *tmp=&Head;
          
                while(tmp->next!=NULL)
                    tmp=tmp->next;
                tmp->next=p;
                p->next=NULL;
                p->user=user;
            }
 
        }
        free(p);
    }
  
    fclose(fp);
    fp=NULL;
    return ;
    
}

void Readlinklisttofile()
{
    FILE *fp;
    List head=Head;
    fp=fopen("personinf.txt","wb");
    while(head.next!=NULL)  
    {
        fwrite(&head.next->user,sizeof(struct _User),1,fp);
        head.next=head.next->next;
    }
    fclose(fp);
    fp=NULL;
    return ;
}         
